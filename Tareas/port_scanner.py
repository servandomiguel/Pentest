import argparse
from scapy.all import *


def get_ports(ports):
    try:
        
        if  "," in ports:
            return [ int(port) for port in ports.split(",")]
        return (int(ports),)

    except Exception as e:
        print("Malformed ports parameter")
        exit(1)
def get_range_ports(rp):
    try:
        (start,limit) = rp.split("-")
        return range(int(start),int(limit))

    except Exception as e:
        print("Malformed range of ports  parameter")
        exit(1)
        
        
def scan_ports(objective, ports):
    sp = RandShort()
    for port in ports:
        package = sr1(IP(dst=objective)/TCP(sport=sp, dport=port, flags="S"), timeout=1, verbose=0)
        
        if package != None:
            
            if package.haslayer(TCP):
                if package[TCP].flags == 18:
                    print('\tport: {:5d} --> open'.format(port))
                    send(IP(dst=objective)/TCP(sport=sp ,dport=port,flags=i"R") 
                elif package[TCP].flags == 20:
                    print('\tport: {:5d} --> closed'.format(port))
                else:
                    print('\tport: {:5d} --> filtered'.format(port))
        else:
            print('\tport: {:5d} --> unanswered'.format(port))



if __name__ == "__main__":
    
    parser = argparse.ArgumentParser("Port scanner")
    parser.add_argument("-o", "--obj", help="Target IP", required=True)
    parser.add_argument("-p", "--ports", help="Ports 21,22,23 ")
    parser.add_argument("-r", "--range", help="Range of ports 21-123")
    args = parser.parse_args()

    obj = args.obj
    
    if args.ports:
        ports = get_ports(args.ports)
    
    elif args.range:
        ports = get_range_ports(args.range)
    
    else:
        ports = range(1,1000)

    print('Scanning objective: {}'.format(obj))
    scan_ports(obj,ports)



